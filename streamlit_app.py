import streamlit as st\nimport pandas as pd\nimport os\nfrom datetime import datetime\nimport re\n\n# Page config\nst.set_page_config(\n    page_title=\"THJ Inventory Manager\",\n    page_icon=\"🎮\",\n    layout=\"wide\"\n)\n\n# Title\nst.title(\"🎮 The Heroes Journey Inventory Manager\")\nst.markdown(\"*Advanced inventory search and Zeb weapon component analyzer*\")\n\n# Sidebar for file upload\nwith st.sidebar:\n    st.header(\"📁 Upload Inventory Files\")\n    uploaded_files = st.file_uploader(\n        \"Select *-Inventory.txt files\",\n        accept_multiple_files=True,\n        type=['txt']\n    )\n\n# Main app logic\nif uploaded_files:\n    # Process files (reuse your existing logic)\n    @st.cache_data\n    def load_web_inventory_files(files):\n        result_list = []\n        for file in files:\n            try:\n                # Read uploaded file\n                content = file.read().decode('utf-8')\n                lines = content.strip().split('\\n')\n                \n                # Parse tab-separated data\n                data = []\n                headers = lines[0].split('\\t')\n                for line in lines[1:]:\n                    data.append(line.split('\\t'))\n                \n                df = pd.DataFrame(data, columns=headers)\n                \n                # Extract character name from filename\n                char_name = file.name.replace('-Inventory.txt', '')\n                df.insert(0, 'Character', char_name)\n                df['IsEmpty'] = df['Name'] == 'Empty'\n                \n                result_list.append(df)\n            except Exception as e:\n                st.error(f\"Error processing {file.name}: {e}\")\n        \n        if result_list:\n            return pd.concat(result_list, ignore_index=True)\n        return pd.DataFrame()\n    \n    # Load data\n    items_df = load_web_inventory_files(uploaded_files)\n    \n    if not items_df.empty:\n        # Statistics\n        col1, col2, col3, col4 = st.columns(4)\n        with col1:\n            st.metric(\"Characters\", items_df['Character'].nunique())\n        with col2:\n            st.metric(\"Total Items\", len(items_df[items_df['IsEmpty'] == False]))\n        with col3:\n            st.metric(\"Empty Slots\", len(items_df[items_df['IsEmpty'] == True]))\n        with col4:\n            st.metric(\"Files Loaded\", len(uploaded_files))\n        \n        # Search Section\n        st.header(\"🔍 Search Inventory\")\n        \n        col1, col2, col3 = st.columns(3)\n        with col1:\n            search_term = st.text_input(\"Item Name\")\n        with col2:\n            character = st.selectbox(\n                \"Character\",\n                ['All'] + sorted(items_df['Character'].unique())\n            )\n        with col3:\n            exact_match = st.checkbox(\"Exact Match\")\n        \n        # Quick search buttons\n        st.subheader(\"⚡ Quick Searches\")\n        \n        col1, col2, col3, col4 = st.columns(4)\n        with col1:\n            if st.button(\"🗡️ All Weapons\"):\n                search_term = \"Sword|Axe|Mace|Dagger\"\n        with col2:\n            if st.button(\"💍 All Rings\"):\n                search_term = \"Ring\"\n        with col3:\n            if st.button(\"🔮 Truth Fragments\"):\n                search_term = \"Fragment of Truth\"\n        with col4:\n            if st.button(\"⭐ Legendary Items\"):\n                search_term = \"Legendary\"\n        \n        # Perform search\n        if search_term:\n            # Reuse your existing search logic\n            df = items_df[items_df['IsEmpty'] == False].copy()\n            \n            if '|' in search_term:\n                df = df[df['Name'].str.contains(search_term, case=False, na=False, regex=True)]\n            elif exact_match:\n                df = df[df['Name'].str.lower() == search_term.lower()]\n            else:\n                df = df[df['Name'].str.contains(search_term, case=False, na=False)]\n            \n            if character != 'All':\n                df = df[df['Character'] == character]\n            \n            # Display results\n            st.subheader(f\"📄 Results ({len(df)} items found)\")\n            \n            if not df.empty:\n                # Results table\n                display_df = df[['Character', 'Name', 'Location', 'Count']].copy()\n                st.dataframe(\n                    display_df,\n                    use_container_width=True,\n                    hide_index=True\n                )\n                \n                # Download button\n                csv = df.to_csv(index=False)\n                st.download_button(\n                    \"💾 Download Results CSV\",\n                    csv,\n                    f\"search_results_{search_term}.csv\",\n                    \"text/csv\"\n                )\n            else:\n                st.info(\"No items found matching your search criteria.\")\n        \n        # Zeb Weapon Analysis\n        st.header(\"🗡️ Zeb Weapon Analysis\")\n        \n        if st.button(\"Check Zeb Weapon Components\"):\n            # Simplified version of your Zeb analysis\n            required_fragments = [\n                \"Akhevan Fragment of Truth\",\n                \"Fiery Fragment of Truth\",\n                \"Gelid Fragment of Truth\",\n                \"Hastened Fragment of Truth\",\n                \"Healing Fragment of Truth\",\n                \"Icy Fragment of Truth\",\n                \"Lethal Fragment of Truth\",\n                \"Magical Fragment of Truth\",\n                \"Replenishing Fragment of Truth\",\n                \"Runic Fragment of Truth\",\n                \"Ssraeshzian Fragment of Truth\",\n                \"Yttrium Fragment of Truth\"\n            ]\n            \n            fragment_status = []\n            for fragment in required_fragments:\n                legendary_count = len(items_df[\n                    items_df['Name'].str.contains(f\"{fragment} (Legendary)\", case=False, na=False)\n                ])\n                enchanted_count = len(items_df[\n                    items_df['Name'].str.contains(f\"{fragment} (Enchanted)\", case=False, na=False)\n                ])\n                \n                status = \"✅\" if legendary_count > 0 or enchanted_count >= 4 else \"❌\"\n                fragment_status.append({\n                    \"Fragment\": fragment.replace(\" Fragment of Truth\", \"\"),\n                    \"Status\": status,\n                    \"Legendary\": legendary_count,\n                    \"Enchanted\": enchanted_count\n                })\n            \n            status_df = pd.DataFrame(fragment_status)\n            st.dataframe(status_df, hide_index=True)\n            \n            ready_count = len([f for f in fragment_status if f['Status'] == '✅'])\n            st.metric(\"Fragments Ready\", f\"{ready_count}/12\")\n            \n            if ready_count == 12:\n                st.success(\"🎉 You can craft a Zeb Weapon!\")\n            else:\n                st.warning(f\"Need {12 - ready_count} more fragment types\")\n\nelse:\n    st.info(\"👆 Upload your inventory files using the sidebar to get started!\")\n    \n    with st.expander(\"📖 How to use this tool\"):\n        st.markdown(\"\"\"\n        1. **Upload Files**: Use the sidebar to upload your `*-Inventory.txt` files\n        2. **Search Items**: Use the search box or quick search buttons\n        3. **Filter Results**: Select specific characters or use exact match\n        4. **Export Data**: Download search results as CSV files\n        5. **Check Zeb Components**: Analyze your fragment collection\n        \n        **File Format**: Files should be tab-separated with columns: Location, Name, ID, Count, Slots\n        \"\"\")\n